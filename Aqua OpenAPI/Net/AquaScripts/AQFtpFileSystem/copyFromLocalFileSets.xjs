//------------------------------------------------------------------------------
// Class:  
//      CoreHadoopFileSystem
// Method:
//      copyFromLocalFileSets()
//
// Synopsis:
//      copyFromLocalFileSets()
//
// Description
//      Copies a list of local files to Hadoop FS as specified by the AQFilesSet
//      object. Use the AQFileSet object to define the source directory and the
//      file pattern to copy.
//    
// Parameters
//      AQFileSets - A list of files, as defined in the AQFileSet object, to
//                   perform the task; required.
//      string     - The location of where the file will be copied; required. 
//
// Throws
//      Exception - on error
//
// Return
//      None.
//
// Example
//      See below.
//------------------------------------------------------------------------------
// all test data will be created under this FS directory
var fs_data_dir = "/test/AQHadoopFileSystem/";
var local_data_dir = "d:/temp/files/";

// get instance of filesystem object
var AQLOCALFS = aqua.filesystem;
//var url = "hdfs://localhost:54310";
var url = "ftp://10.168.2.138";
var AQFS = aqua.net.newFtpFileSystem(url, "anonymous", "user");

test_copyFromLocalFileSets();

//--- copy files specified in a fileset to a directory ---
function test_copyFromLocalFileSets() {

    AQLOCALFS.copy("C:/Temp", local_data_dir);
  
    var dest_base = fs_data_dir + "copy/";   
    AQFS.deleteDirectory(dest_base, true);

    var fileset1 = AQFS.newFileSet();
    var fileset2 = AQFS.newFileSet();
    
    fileset1.setBaseDir(local_data_dir)
    fileset1.setIncludes("**/*.jpg");
    fileset1.setExcludes("**/*.gif");
    
    fileset2.setBaseDir(local_data_dir)
    fileset2.setIncludes("**/*.gif");
    
    var filesets = new Array(fileset1, fileset2);
    
    // testing error condition - source file is required
    exec_copyFromLocalFileSets(null, "ab");
    // testing error condition - destination is requred
    exec_copyFromLocalFileSets("ab", null);
    // this should work
    exec_copyFromLocalFileSets(filesets, dest_base);

     // Clean up
   AQFS.deleteDirectory(dest_base, true);
}

function exec_copyFromLocalFileSets(filesets, destDir) {
    try {
        aqua.console.println("copyFromLocalFileSets: copying " );
        for (var i=0; i<filesets.length; i++){
           aqua.console.println("["+ (filesets[i] == null? 'null' : filesets[i].getBaseDir()) + "]");
        }
        aqua.console.println(" to [" + destDir + "]...");
        AQFS.copyFromLocalFileSets(filesets, destDir);
        aqua.console.println("copyFromLocalFileSets done.");
    } catch(ex) {
        aqua.console.println("copyFromLocalFileSets failed - " + ex.toString());
    }
}
