/*
aqua.math.fit

Synopsys
    Summary of Fit methods provided by aqua.math.fit

Description
Demonstrates various fitting methods.

Example
    see below

*/
var chart = aqua.chart.newChart();
var chart2 = aqua.chart.newChart();
var chart3 = aqua.chart.newChart();
var model = chart.getModel();
var model2 = chart2.getModel();
var model3 = chart3.getModel();

var testCurve = aqua.math.getCurve();
var testFit = aqua.math.getFit();
var testFit2= aqua.math.getFit();
var fitY = new Array();
var fitY2 = new Array();

var rawx=new Array();
var rawy=new Array();
var guess = new Array();
var noise = new Array();
var coeff = new Array();

//var R = new float;

guess[0]=1;
guess[1]=1;
guess[2]=1;


//generate test data
for(i=0;i<100;i++){
   rawx[i]=(i+1)/10.0;
noise[i]=2*Math.random()-1;
  // rawy[i]=2*Math.pow(rawx[i],1.5)+10+noise[i]*5 ;
rawy[i]=.1*Math.pow(rawx[i]-7,3)+ .5*Math.pow(rawx[i]-7,2)+10+noise[i]*1 ;

}

fitY=testFit.linFit(rawx,rawy);
coeff=testFit.linFitCoeff(rawx,rawy);
R=testFit.getRsq(rawy,fitY);

model.addSeries("raw");
model.addSeries("fitted");

for(i=0;i<100;i++){
model.addCategory(rawx[i]);
model.setValue(0,i,rawy[i]);
model.setValue(1,i,fitY[i]);
}

chart.getProperties().setTitle("Linear Fit");
chart.getProperties().setChartTypeLine(0);
chart.getProperties().setChartTypeLine(1);
chart.getProperties().setMergeAxis(true);


chart.getProperties().setRotationX(-45);
chart.getProperties().setDepth(10);
chart.getProperties().setWidth(17);
chart.getProperties().setHeight(12);

//////////////////////
//fitY2=testFit2.linFit(rawx,rawy);
//coeff2=testFit2.linFitCoeff(rawx,rawy);
//R2=testFit2.getRsq(rawy,fitY2);


//////////////////////////////////////
fitY2=testFit2.polyFit(rawx,rawy,3);
coeff2=testFit2.polyFitCoeff(rawx,rawy,3);
R2=testFit2.getRsq(rawy,fitY2);
res2=testFit.getResidual(rawy,fitY);
model3.addSeries("raw");
model3.addSeries("fitted");

for(i=0;i<100;i++){
model3.addCategory(rawx[i]);
model3.setValue(0,i,rawy[i]);
model3.setValue(1,i,fitY2[i]);
}

chart3.getProperties().setTitle("Polynomial Fit");
chart3.getProperties().setChartTypeLine(0);
chart3.getProperties().setChartTypeLine(1);
chart3.getProperties().setMergeAxis(true);


chart3.getProperties().setRotationX(-45);
chart3.getProperties().setDepth(10);
chart3.getProperties().setWidth(17);
chart3.getProperties().setHeight(12);

//////////////////////////////
res=testFit.getResidual(rawy,fitY);
res2=testFit2.getResidual(rawy,fitY2);
model2.addSeries("Residual (linear Fit)");
model2.addSeries("Residual (polynomial Fit)");

for(i=0;i<100;i++){
model2.addCategory(rawx[i]);
model2.setValue(0,i,res[i]);
model2.setValue(1,i,res2[i]);
}

chart2.getProperties().setTitle("Residual");
chart2.getProperties().setChartTypeLine(0);
chart2.getProperties().setChartTypeLine(1);
chart2.getProperties().setMergeAxis(true);


chart2.getProperties().setRotationX(-45);
chart2.getProperties().setDepth(10);
chart2.getProperties().setWidth(17);
chart2.getProperties().setHeight(12);

// image will be available for 5 seconds
var url = chart.cache(5);
var url2 = chart2.cache(5);
var url3 = chart3.cache(5);

//introduction
aqua.response.write('<h1> Aqua Fit Methods</h1><br>');
//aqua.response.write('<ol><li>Linear fit (a first attempt to match data) <li>Polynomial fit <li> residual and R<sup>2</sup></ol><br>');
aqua.response.write('The aqua fit methods offer a way to study the underlying behavior of raw data.  Data sets are often obscured by noise, or by a known tendency the user wants to ignore.  For example, in the following data, there is a clear growth of the data as the x-axis increases.  To quantify that growth, we can use a linear fit.<br>');

aqua.response.write('<pre>         var testFit = aqua.math.getFit();  // create Fit object</pre> ');
aqua.response.write('<pre>         fitY = testFit.linFit(xdata,ydata);  //where fitY is fitted version of data</pre> </br>');

//fig 1
aqua.response.write('<img src=').write(url).write('>');
aqua.response.write('<p style="font-size:200%">');

//notes on fig2
aqua.response.write('Linear Fit = ').write(coeff[1]).write(' x + ').write(coeff[0]).write('<br>  R<sup>2</sup> = ').write(R).write('<hr>');
aqua.response.write('This appears to capture the rising behavior of the data, but is clearly missing some of the behaviors.  We will attempt a polynomial fit instead.<br>');
aqua.response.write('<pre>         fitY = testFit.polyFit(xdata,ydata);  //where fitY is fitted version of data</pre> </br>');

//fig2
aqua.response.write('<img src=').write(url3).write('>');
aqua.response.write('<p style="font-size:200%">');
aqua.response.write('Fit = ').write(coeff2[3]).write(' x<sup>3</sup> + ').write(coeff2[2]).write(' x<sup>2</sup>  + ').write(coeff2[1]).write(' x  + ').write(coeff2[0]);
aqua.response.write('<br>R<sup>2</sup> = ').write(R2).write('<hr>');

//notes on fig2
aqua.response.write('The polynomial fit is a better approximation of the original data.  It not only captures the rising behavior of the data, but the brief oscillation as well.  We can quantify what we mean by "better approximation" by calculating the fit\'s residual and R<sup>2</sup> value.');

aqua.response.write('<pre>         var R = tesFit.getRsq(ydata,fitY);  // calculates degree of agreement between raw and fitted data</pre> ');
aqua.response.write('<pre>         var residual = fitY.getResidual();  //  calculates actual difference between raw and fitted data</pre> </br>');


//fig3
aqua.response.write('<img src=').write(url2).write('><br><br>');
aqua.response.write('<h3>Residual</h3><br>The residual illustrates the result of removing the fit from the data.  If we remove the data predicted by the polynomial fit, we are left with noise.  If we remove the linear fit, however, we still see a pattern of some kind, indicating that the linear fit might not be the best option.  Removing linear fit data is also called \"detrending\" (see math.aqua.curve.deTrend()).<br>');
aqua.response.write('<h3>R<sup>2</sup></h3><br>R<sup>2</sup> on the other hand, is a numerical measure of agreement between the raw and fitted data, with a perfect match being R<sup>2</sup>=1.  We can immediately compare two fits to see which more completely predicts the original data.  Notice that for the fits above, the polynomial R<sup>2</sup> is nearly one and almost twice that of the linear fit.  This normally indicates a better fit.');
